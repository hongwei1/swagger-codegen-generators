package {{apiPackage}}

import code.api.APIFailureNewStyle
import code.api.berlin.group.v1_3.JvalueCaseClass
import net.liftweb.json
import net.liftweb.json._
import code.api.util.APIUtil.{defaultBankId, _}
import code.api.util.NewStyle
import code.api.util.ErrorMessages._
import code.api.util.ApiTag._
import code.api.util.NewStyle.HttpCode
import code.bankconnectors.Connector
import code.model._
import code.util.Helper
import code.views.Views
import net.liftweb.common.Full
import net.liftweb.http.rest.RestHelper
import com.github.dwickern.macros.NameOf.nameOf
import scala.collection.immutable.Nil
import scala.collection.mutable.ArrayBuffer
import com.openbankproject.commons.ExecutionContext.Implicits.global
import scala.concurrent.Future
import {{package}}.ApiCollector
import code.api.util.ApiTag

object APIMethods_{{classname}} extends RestHelper {
    val apiVersion =  ApiCollector.apiVersion
    val resourceDocs = ArrayBuffer[ResourceDoc]()
    val apiRelations = ArrayBuffer[ApiRelation]()
    protected implicit def JvalueToSuper(what: JValue): JvalueCaseClass = JvalueCaseClass(what)

    val endpoints = 
      {{#operations}}{{#operation}}{{operationId}} ::
      {{/operation}}{{/operations}}Nil

    {{#operations}}
        {{#operation}}
            {{newline}}
     resourceDocs += ResourceDoc(
       {{operationId}}, 
       apiVersion, 
       nameOf({{operationId}}),
       "{{httpMethod}}", 
       "{{{vendorExtensions.x-obp-path}}}", 
       "{{{summary}}}",
       s"""${mockedDataText(true)}
            {{#html2md}}{{{unescapedNotes}}}{{/html2md}}
            """,
       json.parse("""{{{vendorExtensions.obp-requestBody}}}"""),
       json.parse("""{{{vendorExtensions.obp-responseBody}}}"""),
       List(UserNotLoggedIn, UnknownError),
       {{#tags}}ApiTag("{{{name}}}") ::{{/tags}} apiTagMockedData :: Nil
     )

     lazy val {{operationId}} : OBPEndpoint = {
       case {{{vendorExtensions.endpointPath}}} {{vendorExtensions.jsonMethod}} _ => {
         cc =>
           for {
             (Full(u), callContext) <- authenticatedAccess(cc, UserNotLoggedIn)
             } yield {
            (json.parse("""{{{vendorExtensions.obp-responseBody}}}"""), callContext)
           }
         }
       }
        {{/operation}}
    {{/operations}}

}



